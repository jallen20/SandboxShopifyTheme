
<div id="{{ id }}" class="chip">
    P: {{ product }}
    ID: {{ id }}
    TITLE: {{ title }}
    LAT: {{ lat }}
    LNG: {{ lng }}

    <script type="module" defer>
        import { waitForMap } from '{{ "init-gmap.js" | asset_url }}'

        function ChipOverlay(position, map) {
            this.id = "{{ id }}_chip";
            this.position = position;
            this.map = map;
            this.div = null;
            this.setMap(map);
        }

        // Inherit from OverlayView
        ChipOverlay.prototype = new google.maps.OverlayView();


        // Implement the onAdd method
        ChipOverlay.prototype.onAdd = function() {
            this.div = document.createElement("div");
            this.div.classList.add("chip-overlay");
            this.div.style.borderStyle = 'none';
            this.div.style.borderWidth = '0px';
            this.div.style.position = 'absolute';
            this.div.style.backgroundColor = 'transparent';
            this.div.style.padding = '5px';

            const svgHtml = `{% render 'clothing_pin' %}`;
            const wrapper = document.createElement("div");
            wrapper.classList.add("svg-chip");
            wrapper.innerHTML = svgHtml;
            const svgEl = wrapper.firstElementChild;
            svgEl.style.fill = 'white';
            svgEl.style.width = "24px";
            svgEl.style.filter = "drop-shadow(0 2px 4px rgba(0, 0, 0, 0.5))";
            this.div.appendChild(svgEl);

            // Attach your event listener here
            this.div.addEventListener("click", (e) => {
                e.stopPropagation(); // prevent map from receiving the click
                console.log("Map chip clicked:", this.position);

                // Fire a custom event
                const event = new CustomEvent("mapChipClicked", {
                    detail: { position: this.position, element: this.div, url: '{{ product-url }}' }
                });
                window.dispatchEvent(event);
            });

            google.maps.OverlayView.preventMapHitsAndGesturesFrom(this.div);

            const panes = this.getPanes();
            panes.overlayMouseTarget.appendChild(this.div);
        };

        // Implement the draw method
        ChipOverlay.prototype.draw = function() {
            // Position the element based on the map's projection
            var overlayProjection = this.getProjection();
            console.log("position", this.position)
            const { lat, lng } = this.position;
            var position = overlayProjection.fromLatLngToDivPixel({ lat: +lat, lng: +lng });

            var div = this.div;
            div.style.left = position.x + 'px';
            div.style.top = position.y + 'px';
        };

        // Implement the onRemove method
        ChipOverlay.prototype.onRemove = function() {
            // Remove the element from the DOM
            if (this.div) {
                this.div.parentNode.removeChild(this.div);
                window.__chips__ = window.__chips__.filter(chip => chip.id !== "{{ id }}_chip");
                this.div = null;
            }
        };

        waitForMap((m, c) => {
            const lat = "{{ lat }}";
            const lng = "{{ lng }}";
            const overlay = new ChipOverlay({ lat, lng}, m)
            c.push(overlay);
            console.log("OV", overlay);
            console.log("C", c);
        })
    </script>

    <style>
        .svg-chip svg {
            width: 58px;
        }
    </style>
</div>